/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var logicParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,3],$V1=[1,4],$V2=[1,5],$V3=[1,6],$V4=[1,7],$V5=[1,8],$V6=[1,9],$V7=[1,10],$V8=[1,11],$V9=[1,12],$Va=[1,13],$Vb=[1,14],$Vc=[1,15],$Vd=[1,16],$Ve=[1,17],$Vf=[1,18],$Vg=[1,19],$Vh=[1,20],$Vi=[1,21],$Vj=[1,22],$Vk=[1,23],$Vl=[1,24],$Vm=[1,25],$Vn=[1,26],$Vo=[1,27],$Vp=[1,28],$Vq=[1,29],$Vr=[1,30],$Vs=[1,31],$Vt=[1,32],$Vu=[1,34],$Vv=[1,35],$Vw=[1,36],$Vx=[1,37],$Vy=[1,38],$Vz=[1,39],$VA=[1,46],$VB=[1,40],$VC=[1,41],$VD=[1,42],$VE=[1,43],$VF=[1,44],$VG=[1,45],$VH=[5,6,7,8,9,10,11,13,19,32,33,34,35,36,37],$VI=[5,6,7,13,19,32,33,34,35,36,37],$VJ=[5,6,7,8,9,13,19,32,33,34,35,36,37],$VK=[5,13,19,32,33,34,35,36,37],$VL=[2,37];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"e":4,"EOF":5,"+":6,"-":7,"*":8,"/":9,"^":10,"%":11,"(":12,")":13,"NUMBER":14,"[":15,"LETTER":16,"]":17,"\"":18,",":19,":":20,"\"\"":21,"null":22,"constE":23,"constPi":24,"round(":25,"roundup(":26,"rounddown(":27,"integer(":28,"mod(":29,"sqrt(":30,"abs(":31,"=":32,"<>":33,">":34,"<":35,">=":36,"<=":37,"isNaN(":38,"if(":39,"min(":40,"max(":41,"sum(":42,"mean(":43,"product(":44,"median(":45,"var(":46,"stdev(":47,"curdate()":48,"curtime()":49,"curdatetime()":50,"datediff(":51,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"+",7:"-",8:"*",9:"/",10:"^",11:"%",12:"(",13:")",14:"NUMBER",15:"[",16:"LETTER",17:"]",18:"\"",19:",",20:":",21:"\"\"",22:"null",23:"constE",24:"constPi",25:"round(",26:"roundup(",27:"rounddown(",28:"integer(",29:"mod(",30:"sqrt(",31:"abs(",32:"=",33:"<>",34:">",35:"<",36:">=",37:"<=",38:"isNaN(",39:"if(",40:"min(",41:"max(",42:"sum(",43:"mean(",44:"product(",45:"median(",46:"var(",47:"stdev(",48:"curdate()",49:"curtime()",50:"curdatetime()",51:"datediff("},
productions_: [0,[3,2],[4,3],[4,3],[4,3],[4,3],[4,3],[4,2],[4,2],[4,3],[4,1],[4,3],[4,3],[4,3],[4,7],[4,5],[4,13],[4,7],[4,1],[4,1],[4,1],[4,1],[4,5],[4,3],[4,3],[4,3],[4,5],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,1],[4,1],[4,1],[4,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 typeof console !== 'undefined' ? console.log($$[$0-1]) : print($$[$0-1]);
          return $$[$0-1]; 
break;
case 2:
this.$ = $$[$0-2] + '+' + $$[$0];
break;
case 3:
this.$ = $$[$0-2] + '-' + $$[$0];
break;
case 4:
this.$ = '(' + $$[$0-2] + ')' + '*' + '(' + $$[$0] + ')';
break;
case 5:
this.$ = '(' + $$[$0-2] + ')' + '/' + '(' + $$[$0] + ')';
break;
case 6:
this.$ = 'Math.pow(' + $$[$0-2] + ',' + $$[$0] + ')';
break;
case 7:
this.$ = '(' + $$[$0-1] + ')' + '/100';
break;
case 8:
this.$ = '(0-(' + $$[$0] + '))';
break;
case 9:
this.$ = '(' + $$[$0-1] + ')';
break;
case 10:
this.$ = yytext;
break;
case 11:
this.$ = 'this.' + $$[$0-1];
break;
case 12: case 13:
this.$ = '"' + $$[$0-1] + '"';
break;
case 14:
this.$ = '"' + $$[$0-5] + '-' + $$[$0-3] + '-' + $$[$0-1] + '"';
break;
case 15:
this.$ = '"' + $$[$0-3] + '-' + $$[$0-1] + '"';
break;
case 16:
this.$ = '"' + $$[$0-11] + '-' + $$[$0-9] + '-' + $$[$0-7] + 'T' + $$[$0-5] + ':' + $$[$0-3] + ':' + $$[$0-1] + 'Z"';
break;
case 17:
this.$ = '"1970-01-01T' + $$[$0-5] + ':' + $$[$0-3] + ':' + $$[$0-1] + 'Z"';
break;
case 18:
this.$ = '""';
break;
case 19:
this.$ = null;
break;
case 20:
this.$ = 'Math.E';
break;
case 21:
this.$ = 'Math.PI';
break;
case 22:
this.$ = 'Number((' + $$[$0-3] + ').toFixed(' + $$[$0-1] + '))';
break;
case 23:
this.$ = 'Math.ceil(' + $$[$0-1] + ')';
break;
case 24:
this.$ = 'Math.floor(' + $$[$0-1] + ')';
break;
case 25:
this.$ = 'Math.round(' + $$[$0-1] + ')';
break;
case 26:
this.$ = '(' + $$[$0-3] + ')' + '%' + '(' + $$[$0-1] + ')';
break;
case 27:
this.$ = 'Math.sqrt(' + $$[$0-1] + ')';
break;
case 28:
this.$ = 'Math.abs(' + $$[$0-1] + ')';
break;
case 29:
this.$ = "(function eq (x, y) {return x===y} ) (new Function('return ' + " + $$[$0-2] + ").call(), new Function('return ' + " + $$[$0] + ").call())";
break;
case 30:
this.$ = "(function neq (x, y) {return x!==y} ) (new Function('return ' + " + $$[$0-2] + ").call(), new Function('return ' + " + $$[$0] + ").call())";
break;
case 31:
this.$ = "(function gt (x, y) {return x>y} ) (new Function('return ' + " + $$[$0-2] + ").call(), new Function('return ' + " + $$[$0] + ").call())";
break;
case 32:
this.$ = "(function lt (x, y) {return x<y} ) (new Function('return ' + " + $$[$0-2] + ").call(), new Function('return ' + " + $$[$0] + ").call())";
break;
case 33:
this.$ = "(function geq (x, y) {return x>=y} ) (new Function('return ' + " + $$[$0-2] + ").call(), new Function('return ' + " + $$[$0] + ").call())";
break;
case 34:
this.$ = "(function leq (x, y) {return x<=y} ) (new Function('return ' + " + $$[$0-2] + ").call(), new Function('return ' + " + $$[$0] + ").call())";
break;
case 35:
this.$ = 'isNaN(' + $$[$0-1] + ')';
break;
case 36:
this.$ = '(function ifel (x, y, z) {if (x) {return y} else {return z}} ) (' + $$[$0-1][0] + ',' + $$[$0-1][1] + ',' +  $$[$0-1][2] + ')';
break;
case 37:
if (Array.isArray($$[$0-2])) {
            $$[$0-2].push($$[$0]);
            this.$ = $$[$0-2];
        } else {
            this.$ = [$$[$0-2], $$[$0]];
        };
break;
case 38:
this.$ = '(function min (x) {if (Array.isArray(x)) {return Math.min.apply(null, x)} else {return x}}) ([' + $$[$0-1] + '])';
break;
case 39:
this.$ = '(function max (x) {if (Array.isArray(x)) {return Math.max.apply(null, x)} else {return x}}) ([' + $$[$0-1] + '])';
break;
case 40:
this.$ = '(function sum (x) {if (Array.isArray(x)) {return x.reduce((a,b) => Number(a) + Number(b), 0)} else {return x}}) ([' + $$[$0-1] + '])';
break;
case 41:
this.$ = '(function mean (x) {if (Array.isArray(x)) {return x.reduce((a,b) => Number(a) + Number(b), 0)/(x.length)} else {return x}}) ([' + $$[$0-1] + '])';
break;
case 42:
this.$ = '(function prod (x) {if (Array.isArray(x)) {return x.reduce((a,b) => Number(a) * Number(b), 1)} else {return x}})([' + $$[$0-1] + '])';
break;
case 43:
this.$ = '(function med (x) {if (Array.isArray(x)) {x.sort((a,b) => Number(a) - Number(b)); return (Number(x[Math.floor((x.length-1)/2)]) + Number(x[Math.ceil((x.length-1)/2)]))/2} else {return x}}) ([' + $$[$0-1] + '])';
break;
case 44:
this.$ = '(function vrn (x) {if (Array.isArray(x)) {var mean = (x.reduce((a,b)=>Number(a)+Number(b),0))/(x.length); var sqDevs=[]; for(i = 0; i<x.length; i++){sqDevs[i] = Math.pow((Number(x[i])-mean),2);}; return sqDevs.reduce((a,b) => Number(a) + Number(b), 0)/(sqDevs.length)} else {return 0}}) ([' + $$[$0-1] + '])';
break;
case 45:
this.$ = '(function std (x) {if (Array.isArray(x)) {var mean = (x.reduce((a,b)=>Number(a)+Number(b),0))/(x.length); var sqDevs=[]; for(i = 0; i<x.length; i++){sqDevs[i] = Math.pow((Number(x[i])-mean),2);}; return Math.sqrt(sqDevs.reduce((a,b) => Number(a) + Number(b), 0)/(sqDevs.length))} else {return 0}}) ([' + $$[$0-1] + '])';
break;
case 46:
var today = new Date(); this.$ = '"' + today.toISOString().slice(0,10) + '"';
break;
case 47:
var today = new Date(); this.$ = '"' + today.toISOString().slice(11,-5) + '"';
break;
case 48:
var today = new Date(); this.$ = '"' + today.toISOString() + '"';
break;
case 49:
var signedDiff;
        if ($$[$0-1][3]==='0') {
            signedDiff = 'Math.abs(' + '(new Date(' + $$[$0-1][0] + ') - new Date(' +$$[$0-1][1] + ')' + '))';
        } else {
            signedDiff = '( + new Date(' + $$[$0-1][0] + ') - new Date(' + $$[$0-1][1] + '))'
        }
        var conv = 1;
        if ($$[$0-1][2] === "\"y\"") {
            conv = 31556952000;
        } else if($$[$0-1][2] === "\"mo\"") {
            conv = 2630016000;
        } else if($$[$0-1][2] === "\"d\"") {
            conv = 86400000;
        } else if($$[$0-1][2] === "\"h\"") {
            conv = 3600000;
        } else if($$[$0-1][2] === "\"m\"") {
            conv = 60000;
        } else if($$[$0-1][2] === "\"s\"") {
            conv = 1000;
        } else {
            conv = 1;
        }
        this.$ = signedDiff + '/' + conv;
        
break;
}
},
table: [{3:1,4:2,7:$V0,12:$V1,14:$V2,15:$V3,18:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt},{1:[3]},{5:[1,33],6:$Vu,7:$Vv,8:$Vw,9:$Vx,10:$Vy,11:$Vz,19:$VA,32:$VB,33:$VC,34:$VD,35:$VE,36:$VF,37:$VG},{4:47,7:$V0,12:$V1,14:$V2,15:$V3,18:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt},{4:48,7:$V0,12:$V1,14:$V2,15:$V3,18:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt},o($VH,[2,10]),{16:[1,49]},{14:[1,51],16:[1,50]},o($VH,[2,18]),o($VH,[2,19]),o($VH,[2,20]),o($VH,[2,21]),{4:52,7:$V0,12:$V1,14:$V2,15:$V3,18:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt},{4:53,7:$V0,12:$V1,14:$V2,15:$V3,18:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt},{4:54,7:$V0,12:$V1,14:$V2,15:$V3,18:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt},{4:55,7:$V0,12:$V1,14:$V2,15:$V3,18:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt},{4:56,7:$V0,12:$V1,14:$V2,15:$V3,18:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt},{4:57,7:$V0,12:$V1,14:$V2,15:$V3,18:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt},{4:58,7:$V0,12:$V1,14:$V2,15:$V3,18:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt},{4:59,7:$V0,12:$V1,14:$V2,15:$V3,18:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt},{4:60,7:$V0,12:$V1,14:$V2,15:$V3,18:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt},{4:61,7:$V0,12:$V1,14:$V2,15:$V3,18:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt},{4:62,7:$V0,12:$V1,14:$V2,15:$V3,18:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt},{4:63,7:$V0,12:$V1,14:$V2,15:$V3,18:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt},{4:64,7:$V0,12:$V1,14:$V2,15:$V3,18:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt},{4:65,7:$V0,12:$V1,14:$V2,15:$V3,18:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt},{4:66,7:$V0,12:$V1,14:$V2,15:$V3,18:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt},{4:67,7:$V0,12:$V1,14:$V2,15:$V3,18:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt},{4:68,7:$V0,12:$V1,14:$V2,15:$V3,18:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt},o($VH,[2,46]),o($VH,[2,47]),o($VH,[2,48]),{4:69,7:$V0,12:$V1,14:$V2,15:$V3,18:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt},{1:[2,1]},{4:70,7:$V0,12:$V1,14:$V2,15:$V3,18:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt},{4:71,7:$V0,12:$V1,14:$V2,15:$V3,18:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt},{4:72,7:$V0,12:$V1,14:$V2,15:$V3,18:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt},{4:73,7:$V0,12:$V1,14:$V2,15:$V3,18:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt},{4:74,7:$V0,12:$V1,14:$V2,15:$V3,18:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt},o($VH,[2,7]),{4:75,7:$V0,12:$V1,14:$V2,15:$V3,18:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt},{4:76,7:$V0,12:$V1,14:$V2,15:$V3,18:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt},{4:77,7:$V0,12:$V1,14:$V2,15:$V3,18:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt},{4:78,7:$V0,12:$V1,14:$V2,15:$V3,18:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt},{4:79,7:$V0,12:$V1,14:$V2,15:$V3,18:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt},{4:80,7:$V0,12:$V1,14:$V2,15:$V3,18:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt},{4:81,7:$V0,12:$V1,14:$V2,15:$V3,18:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt},o($VH,[2,8]),{6:$Vu,7:$Vv,8:$Vw,9:$Vx,10:$Vy,11:$Vz,13:[1,82],19:$VA,32:$VB,33:$VC,34:$VD,35:$VE,36:$VF,37:$VG},{17:[1,83]},{18:[1,84]},{7:[1,86],18:[1,85],20:[1,87]},{6:$Vu,7:$Vv,8:$Vw,9:$Vx,10:$Vy,11:$Vz,19:[1,88],32:$VB,33:$VC,34:$VD,35:$VE,36:$VF,37:$VG},{6:$Vu,7:$Vv,8:$Vw,9:$Vx,10:$Vy,11:$Vz,13:[1,89],19:$VA,32:$VB,33:$VC,34:$VD,35:$VE,36:$VF,37:$VG},{6:$Vu,7:$Vv,8:$Vw,9:$Vx,10:$Vy,11:$Vz,13:[1,90],19:$VA,32:$VB,33:$VC,34:$VD,35:$VE,36:$VF,37:$VG},{6:$Vu,7:$Vv,8:$Vw,9:$Vx,10:$Vy,11:$Vz,13:[1,91],19:$VA,32:$VB,33:$VC,34:$VD,35:$VE,36:$VF,37:$VG},{6:$Vu,7:$Vv,8:$Vw,9:$Vx,10:$Vy,11:$Vz,19:[1,92],32:$VB,33:$VC,34:$VD,35:$VE,36:$VF,37:$VG},{6:$Vu,7:$Vv,8:$Vw,9:$Vx,10:$Vy,11:$Vz,13:[1,93],19:$VA,32:$VB,33:$VC,34:$VD,35:$VE,36:$VF,37:$VG},{6:$Vu,7:$Vv,8:$Vw,9:$Vx,10:$Vy,11:$Vz,13:[1,94],19:$VA,32:$VB,33:$VC,34:$VD,35:$VE,36:$VF,37:$VG},{6:$Vu,7:$Vv,8:$Vw,9:$Vx,10:$Vy,11:$Vz,13:[1,95],19:$VA,32:$VB,33:$VC,34:$VD,35:$VE,36:$VF,37:$VG},{6:$Vu,7:$Vv,8:$Vw,9:$Vx,10:$Vy,11:$Vz,13:[1,96],19:$VA,32:$VB,33:$VC,34:$VD,35:$VE,36:$VF,37:$VG},{6:$Vu,7:$Vv,8:$Vw,9:$Vx,10:$Vy,11:$Vz,13:[1,97],19:$VA,32:$VB,33:$VC,34:$VD,35:$VE,36:$VF,37:$VG},{6:$Vu,7:$Vv,8:$Vw,9:$Vx,10:$Vy,11:$Vz,13:[1,98],19:$VA,32:$VB,33:$VC,34:$VD,35:$VE,36:$VF,37:$VG},{6:$Vu,7:$Vv,8:$Vw,9:$Vx,10:$Vy,11:$Vz,13:[1,99],19:$VA,32:$VB,33:$VC,34:$VD,35:$VE,36:$VF,37:$VG},{6:$Vu,7:$Vv,8:$Vw,9:$Vx,10:$Vy,11:$Vz,13:[1,100],19:$VA,32:$VB,33:$VC,34:$VD,35:$VE,36:$VF,37:$VG},{6:$Vu,7:$Vv,8:$Vw,9:$Vx,10:$Vy,11:$Vz,13:[1,101],19:$VA,32:$VB,33:$VC,34:$VD,35:$VE,36:$VF,37:$VG},{6:$Vu,7:$Vv,8:$Vw,9:$Vx,10:$Vy,11:$Vz,13:[1,102],19:$VA,32:$VB,33:$VC,34:$VD,35:$VE,36:$VF,37:$VG},{6:$Vu,7:$Vv,8:$Vw,9:$Vx,10:$Vy,11:$Vz,13:[1,103],19:$VA,32:$VB,33:$VC,34:$VD,35:$VE,36:$VF,37:$VG},{6:$Vu,7:$Vv,8:$Vw,9:$Vx,10:$Vy,11:$Vz,13:[1,104],19:$VA,32:$VB,33:$VC,34:$VD,35:$VE,36:$VF,37:$VG},{6:$Vu,7:$Vv,8:$Vw,9:$Vx,10:$Vy,11:$Vz,13:[1,105],19:$VA,32:$VB,33:$VC,34:$VD,35:$VE,36:$VF,37:$VG},o($VI,[2,2],{8:$Vw,9:$Vx,10:$Vy,11:$Vz}),o($VI,[2,3],{8:$Vw,9:$Vx,10:$Vy,11:$Vz}),o($VJ,[2,4],{10:$Vy,11:$Vz}),o($VJ,[2,5],{10:$Vy,11:$Vz}),o([5,6,7,8,9,10,13,19,32,33,34,35,36,37],[2,6],{11:$Vz}),o($VK,[2,29],{6:$Vu,7:$Vv,8:$Vw,9:$Vx,10:$Vy,11:$Vz}),o($VK,[2,30],{6:$Vu,7:$Vv,8:$Vw,9:$Vx,10:$Vy,11:$Vz}),o($VK,[2,31],{6:$Vu,7:$Vv,8:$Vw,9:$Vx,10:$Vy,11:$Vz}),o($VK,[2,32],{6:$Vu,7:$Vv,8:$Vw,9:$Vx,10:$Vy,11:$Vz}),o($VK,[2,33],{6:$Vu,7:$Vv,8:$Vw,9:$Vx,10:$Vy,11:$Vz}),o($VK,[2,34],{6:$Vu,7:$Vv,8:$Vw,9:$Vx,10:$Vy,11:$Vz}),o([5,13,19],$VL,{6:$Vu,7:$Vv,8:$Vw,9:$Vx,10:$Vy,11:$Vz,32:$VB,33:$VC,34:$VD,35:$VE,36:$VF,37:$VG}),o($VH,[2,9]),o($VH,[2,11]),o($VH,[2,12]),o($VH,[2,13]),{14:[1,106]},{14:[1,107]},{4:108,7:$V0,12:$V1,14:$V2,15:$V3,18:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt},o($VH,[2,23]),o($VH,[2,24]),o($VH,[2,25]),{4:109,7:$V0,12:$V1,14:$V2,15:$V3,18:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,38:$Vg,39:$Vh,40:$Vi,41:$Vj,42:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt},o($VH,[2,27]),o($VH,[2,28]),o($VH,[2,35]),o($VH,[2,36]),o($VH,[2,38]),o($VH,[2,39]),o($VH,[2,40]),o($VH,[2,41]),o($VH,[2,42]),o($VH,[2,43]),o($VH,[2,44]),o($VH,[2,45]),o($VH,[2,49]),{7:[1,110],18:[1,111]},{20:[1,112]},{6:$Vu,7:$Vv,8:$Vw,9:$Vx,10:$Vy,11:$Vz,13:[1,113],19:$VL,32:$VB,33:$VC,34:$VD,35:$VE,36:$VF,37:$VG},{6:$Vu,7:$Vv,8:$Vw,9:$Vx,10:$Vy,11:$Vz,13:[1,114],19:$VL,32:$VB,33:$VC,34:$VD,35:$VE,36:$VF,37:$VG},{14:[1,115]},o($VH,[2,15]),{14:[1,116]},o($VH,[2,22]),o($VH,[2,26]),{18:[1,117],19:[1,118]},{18:[1,119]},o($VH,[2,14]),{14:[1,120]},o($VH,[2,17]),{20:[1,121]},{14:[1,122]},{20:[1,123]},{14:[1,124]},{18:[1,125]},o($VH,[2,16])],
defaultActions: {33:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 14
break;
case 2:return 8
break;
case 3:return 9
break;
case 4:return 7
break;
case 5:return 6
break;
case 6:return 10
break;
case 7:return '!'
break;
case 8:return 11
break;
case 9:return 12
break;
case 10:return 13
break;
case 11:return 24
break;
case 12:return 23
break;
case 13:return 19
break;
case 14:return 25
break;
case 15:return 26
break;
case 16:return 27
break;
case 17:return 29
break;
case 18:return 28
break;
case 19:return 30
break;
case 20:return 31
break;
case 21:return 32
break;
case 22:return 33
break;
case 23:return 36
break;
case 24:return 37
break;
case 25:return 34
break;
case 26:return 35
break;
case 27:return 39
break;
case 28:return 22
break;
case 29:return 38
break;
case 30:return 40
break;
case 31:return 41
break;
case 32:return 43
break;
case 33:return 45
break;
case 34:return 'mode('
break;
case 35:return 42
break;
case 36:return 47
break;
case 37:return 46
break;
case 38:return 44
break;
case 39:return 48
break;
case 40:return 49
break;
case 41:return 50
break;
case 42:return 51
break;
case 43:return 16 /* all functions using letters must be defined BEFORE this to avoid errors  */
break;
case 44:return 15
break;
case 45:return 17
break;
case 46:return 18
break;
case 47:return 20
break;
case 48:return 5
break;
case 49:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:!)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:constPi\b)/,/^(?:constE\b)/,/^(?:,)/,/^(?:round\()/,/^(?:roundup\()/,/^(?:rounddown\()/,/^(?:mod\()/,/^(?:integer\()/,/^(?:sqrt\()/,/^(?:abs\()/,/^(?:=)/,/^(?:<>)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:if\()/,/^(?:null\b)/,/^(?:isNaN\()/,/^(?:min\()/,/^(?:max\()/,/^(?:mean\()/,/^(?:median\()/,/^(?:mode\()/,/^(?:sum\()/,/^(?:stdev\()/,/^(?:var\()/,/^(?:product\()/,/^(?:curdate\(\))/,/^(?:curtime\(\))/,/^(?:curdatetime\(\))/,/^(?:datediff\()/,/^(?:[a-zA-Z0-9_]+(_[a-zA-Z0-9_]+)?\b)/,/^(?:\[)/,/^(?:\])/,/^(?:")/,/^(?::)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = logicParser;
exports.Parser = logicParser.Parser;
exports.parse = function () { return logicParser.parse.apply(logicParser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}